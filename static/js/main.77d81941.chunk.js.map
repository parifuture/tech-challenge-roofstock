{"version":3,"sources":["components/Rating.jsx","components/HomeItem.jsx","App.js","serviceWorker.js","index.js"],"names":["Rating","props","id","starRating","className","type","name","value","htmlFor","title","currencyFormat","num","toString","replace","HomeItem","result","processedData","address","financial","lease","mainImageUrl","physical","score","streetAddress","address1","address2","cityStateZip","city","state","zip","rentalPrice","monthlyRent","leaseSummary","imageUrl","bedBath","bedRooms","bathRooms","squareFeet","yearBuilt","listPrice","grossYield","Number","parseFloat","toFixed","processData","src","alt","key","App","homesList","fetch","then","res","json","data","setState","catch","console","log","homeItems","this","properties","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77d81941.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\nconst Rating = (props) => {\n  const {\n    id,\n  } = props;\n  const starRating = [\n    `star5-${id}`,\n    `star4half-${id}`,\n    `star4-${id}`,\n    `star3half-${id}`,\n    `star3-${id}`,\n    `star2half-${id}`,\n    `star2-${id}`,\n    `star1half-${id}`,\n    `star1-${id}`,\n    `starhalf-${id}`,\n  ];\n  return (\n    <fieldset className=\"rating\">\n      <input type=\"radio\" id={starRating[0]} name=\"rating\" value=\"5\" />\n      <label className=\"full\" htmlFor={starRating[0]} title=\"Awesome - 5 stars\" />\n      <input type=\"radio\" id={starRating[1]} name=\"rating\" value=\"4 and a half\" />\n      <label className=\"half\" htmlFor={starRating[1]} title=\"Pretty good - 4.5 stars\" />\n      <input type=\"radio\" id={starRating[2]} name=\"rating\" value=\"4\" />\n      <label className=\"full\" htmlFor={starRating[2]} title=\"Pretty good - 4 stars\" />\n      <input type=\"radio\" id={starRating[3]} name=\"rating\" value=\"3 and a half\" />\n      <label className=\"half\" htmlFor={starRating[3]} title=\"Meh - 3.5 stars\" />\n      <input type=\"radio\" id={starRating[4]} name=\"rating\" value=\"3\" />\n      <label className=\"full\" htmlFor={starRating[4]} title=\"Meh - 3 stars\" />\n      <input type=\"radio\" id={starRating[5]} name=\"rating\" value=\"2 and a half\" />\n      <label className=\"half\" htmlFor={starRating[5]} title=\"Kinda bad - 2.5 stars\" />\n      <input type=\"radio\" id={starRating[6]} name=\"rating\" value=\"2\" />\n      <label className=\"full\" htmlFor={starRating[6]} title=\"Kinda bad - 2 stars\" />\n      <input type=\"radio\" id={starRating[7]} name=\"rating\" value=\"1 and a half\" />\n      <label className=\"half\" htmlFor={starRating[7]} title=\"Meh - 1.5 stars\" />\n      <input type=\"radio\" id={starRating[8]} name=\"rating\" value=\"1\" />\n      <label className=\"full\" htmlFor={starRating[8]} title=\"Sucks big time - 1 star\" />\n      <input type=\"radio\" id={starRating[9]} name=\"rating\" value=\"half\" />\n      <label className=\"half\" htmlFor={starRating[9]} title=\"Sucks big time - 0.5 stars\" />\n    </fieldset>\n  );\n};\n\nexport default Rating;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nconst currencyFormat = (num) => `${num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`;\n\nconst processData = (props) => {\n  const processedData = {};\n  if (props) {\n    const {\n      id, address, financial, lease, mainImageUrl, physical, score,\n    } = props;\n    processedData.id = id;\n    processedData.streetAddress = `${address.address1} ${address.address2 || ''}`;\n    processedData.cityStateZip = `${props.address.city}, ${props.address.state} ${props.address.zip}`;\n\n    if (financial) {\n      processedData.rentalPrice = `$${financial.monthlyRent}`;\n    } else if (lease) {\n      processedData.rentalPrice = `$${lease.leaseSummary.monthlyRent}`;\n    } else {\n      processedData.rentalPrice = 'N/A';\n    }\n\n    if (!mainImageUrl) {\n      // processedData.imageUrl = 'https://placehold.it/217x145';\n      processedData.imageUrl = 'https://picsum.photos/217/145';\n    } else {\n      processedData.imageUrl = props.mainImageUrl;\n    }\n\n    if (physical) {\n      processedData.bedBath = `${physical.bedRooms}bd, ${physical.bathRooms}ba | ${physical.squareFeet}sqft | Built in ${physical.yearBuilt}`;\n    } else {\n      processedData.bedBath = '2bd,2ba | 1250sqft | Built in 1987';\n    }\n\n    if (financial) {\n      processedData.listPrice = `${financial.listPrice}`;\n      processedData.monthlyRent = `${financial.monthlyRent}`;\n      processedData.grossYield = Number.parseFloat((processedData.monthlyRent * 1200) / processedData.listPrice).toFixed(2);\n\n      processedData.listPrice = `$${currencyFormat(processedData.listPrice)}`;\n      processedData.monthlyRent = `$${currencyFormat(processedData.monthlyRent)}`;\n    } else {\n      processedData.listPrice = 'N/A';\n      processedData.monthlyRent = 'N/A';\n      processedData.grossYield = 'N/A';\n    }\n\n    if (score) {\n      processedData.score = score;\n    }\n  }\n  return processedData;\n};\n\nconst HomeItem = ({ props }) => {\n  if (props) {\n    const result = processData(props);\n\n    return (\n      <div className=\"w-full sm:w-1/2 md:w-1/5 mb-4 px-2\">\n        <div className=\"relative border bg-white rounded-lg border overflow-hidden\">\n          <picture className=\"block border-b\">\n            <img className=\"block\" src={result.imageUrl} alt=\"Pictures Coming Soon\" />\n          </picture>\n          <div className=\"opacity-50 relative -mt-12\">\n            <div className=\"bg-black shadow-lg\">\n              <div className=\"ml-1 mt-1 text-lg text-white font-medium\">\n                {result.listPrice}\n              </div>\n              <div className=\"flex items-baseline\">\n                <div className=\"subpixel-antialiased normal-case ml-2 text-white text-xs uppercase font-semibold tracking-wide\">\n                  {result.bedBath}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <div className=\"grid grid-flow-row grid-cols-2\">\n              <div className=\"flex\">\n                <div className=\"w-1/2 h-12 border-r pl-1 border-b\">\n                  <h3 className=\"text-gray-600 text-sm\">Monthly Rent</h3>\n                  <p>\n                    {result.monthlyRent}\n                  </p>\n                </div>\n                <div className=\"w-1/2 h-12 border-b pl-1\">\n                  <h3 className=\"text-gray-600 text-sm\">Gross Yield</h3>\n                    <p>\n                      {result.grossYield}\n                      %\n                    </p>\n                </div>\n              </div>\n              <div className=\"flex\">\n                <div className=\"w-1/2 h-12 border-r pl-1 border-b\">\n                  <h3 className=\"text-gray-600 text-sm\">Total Return</h3>\n                  <p>$580</p>\n                </div>\n                <div className=\"w-1/2 h-12 border-b pl-1\">\n                  <h3 className=\"text-gray-600 text-sm\">Neighborhood</h3>\n                  <Rating key={result.id} id={result.id} score={result.score} />\n                </div>\n              </div>\n              <div className=\"flex\">\n                <div className=\"w-full h-12 pl-1\">\n                  <h3 className=\"text-base leading-tight\">\n                    {result.streetAddress}\n                    {' '}\n                    <br />\n                    {' '}\n                    {result.cityStateZip}\n                  </h3>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } return (\n    <h1> Loading...</h1>\n  );\n};\n\nexport default HomeItem;\n","import React, { Component } from 'react';\nimport HomeItem from './components/HomeItem';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      homesList: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://dev1-sample.azurewebsites.net/properties.json')\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({ homesList: data });\n      })\n      .catch(console.log);\n  }\n\n  render() {\n    // const homesList = this.state.homesList;\n    const { homesList } = this.state;\n    let homeItems;\n    if (homesList.properties) {\n      homeItems = homesList.properties.map((item) => <HomeItem key={item.id} props={item} />);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"container mx-auto p-8 bg-white\">\n          <div className=\"flex flex-row flex-wrap -mx-2\">\n            {homeItems}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}